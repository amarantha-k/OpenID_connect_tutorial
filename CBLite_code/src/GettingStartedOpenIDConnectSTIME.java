import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.StringTokenizer;
import java.util.UUID;

import com.couchbase.lite.Authenticator;
import com.couchbase.lite.CouchbaseLite;
import com.couchbase.lite.CouchbaseLiteException;
import com.couchbase.lite.DataSource;
import com.couchbase.lite.Database;
import com.couchbase.lite.DatabaseConfiguration;
import com.couchbase.lite.Document;
import com.couchbase.lite.DocumentReplication;
import com.couchbase.lite.DocumentReplicationListener;
import com.couchbase.lite.Endpoint;
import com.couchbase.lite.Expression;
import com.couchbase.lite.Meta;
import com.couchbase.lite.MutableDocument;
import com.couchbase.lite.Query;
import com.couchbase.lite.QueryBuilder;
import com.couchbase.lite.ReplicatedDocument;
import com.couchbase.lite.Replicator;
import com.couchbase.lite.ReplicatorConfiguration;
import com.couchbase.lite.Result;
import com.couchbase.lite.ResultSet;
import com.couchbase.lite.SelectResult;
import com.couchbase.lite.SessionAuthenticator;
import com.couchbase.lite.URLEndpoint;

import kong.unirest.Cookie;
import kong.unirest.Header;
import kong.unirest.HttpResponse;
import kong.unirest.JsonNode;
import kong.unirest.Unirest;
import kong.unirest.json.JSONObject;

public class GettingStartedOpenIDConnectSTIME {

	private static final String DB_NAME = "stime";
	/*
	 * Credentials declared this way purely for expediency in this demo - use OAUTH
	 * in production code
	 */
	private static final String DB_USER = "90100.adherent.pdv";
	private static final String DB_PASS = "instranet";

	private static final String SYNC_GATEWAY_URL = "ws://52.174.108.107:4984/stime";
	private static final String DB_PATH = new File("").getAbsolutePath() + "/resources";

	public static void main(String[] args) throws CouchbaseLiteException, InterruptedException, URISyntaxException {
		Random RANDOM = new Random();

		Double randVn = RANDOM.nextDouble() + 1;

		String Prop_Id = "id";
		String Prop_Name = "name";
		String Prop_Price = "price";

		String Prop_Type = "type";
		String searchStringType = "product";

		String Prop_Channels = "channels";
		String channelValue = "PDV_Bretagne";

		// Initialize Couchbase Lite
		CouchbaseLite.init();

		// Get the database (and create it if it doesnâ€™t exist).
		DatabaseConfiguration config = new DatabaseConfiguration();
		config.setDirectory(DB_PATH);
		// config.setEncryptionKey(new EncryptionKey(DB_PASS));
		Database database = new Database(DB_NAME, config);

		// Create a new document (i.e. a record) in the database.
		MutableDocument mutableDoc = new MutableDocument("produit_from_CBL_" + UUID.randomUUID() + ":" + DB_USER).setString(Prop_Type,
				"product");

		// Save it to the database.
		database.save(mutableDoc);

		// Update a document.
		mutableDoc = database.getDocument(mutableDoc.getId()).toMutable();
		mutableDoc.setDouble(Prop_Price, randVn);
		mutableDoc.setString(Prop_Name, "produit_local_DB");
		mutableDoc.setString(Prop_Channels, channelValue);
		database.save(mutableDoc);

		Document document = database.getDocument(mutableDoc.getId());
		// Log the document ID (generated by the database) and properties
		System.out.println("Document ID is :: " + document.getId());
		System.out.println("Name " + document.getString(Prop_Name));
		System.out.println("Price " + document.getDouble(Prop_Price));
		System.out.println("Channels " + document.getString(Prop_Channels));

		// Create a query to fetch documents of type "product".
		System.out.println("== Executing Query 1");
		Query query = QueryBuilder.select(SelectResult.all()).from(DataSource.database(database))
				.where(Expression.property(Prop_Type).equalTo(Expression.string(searchStringType)));
		ResultSet result = query.execute();
		System.out.println(
				String.format("Query returned %d rows of type %s", result.allResults().size(), searchStringType));

//		// Create a query to fetch all documents.
//		System.out.println("== Executing Query 2");
//		Query queryAll = QueryBuilder
//				.select(SelectResult.expression(Meta.id), SelectResult.property(Prop_Name),
//						SelectResult.property(Prop_Price), SelectResult.property(Prop_Type))
//				.from(DataSource.database(database));
//		try {
//			for (Result thisDoc : queryAll.execute()) {
//				numRows++;
//				System.out.println(String.format("%d ... Id: %s is learning: %s version: %.2f type is %s", numRows,
//						thisDoc.getString(Prop_Id), thisDoc.getString(Prop_Name), thisDoc.getDouble(Prop_Price),
//						thisDoc.getString(Prop_Type)));
//			}
//		} catch (CouchbaseLiteException e) {
//			e.printStackTrace();
//		}
//		System.out.println(String.format("Total rows returned by query = %d", numRows));

		Endpoint targetEndpoint = new URLEndpoint(new URI(SYNC_GATEWAY_URL));
		ReplicatorConfiguration replConfig = new ReplicatorConfiguration(database, targetEndpoint);
		replConfig.setReplicatorType(ReplicatorConfiguration.ReplicatorType.PUSH_AND_PULL);

		replConfig.setContinuous(true);

		// Add OpenID Connect authentication.
		// step 3 (2 / 2)
		Cookie cookie = setTokenIDAuthorizationBearer(DB_USER, DB_PASS);
		replConfig.setAuthenticator(new SessionAuthenticator(cookie.getValue(), "SyncGatewaySession"));
//		
//		List<String> list = new ArrayList<String>();
//		list.add("PDV_Bretagne");
//		replConfig.setChannels(list);
//		
//		if(null != replConfig.getChannels()){
//			for (String channel : replConfig.getChannels()) {
//				System.out.println("A channel for user " + DB_USER + " is : " + channel);
//			}
//		}
		
		// Create replicator (be sure to hold a reference somewhere that will prevent
		// the Replicator from being GCed)
		Replicator replicator = new Replicator(replConfig);

		// Listen to replicator change events.
		replicator.addChangeListener(change -> {
			if (change.getStatus().getError() != null) {
				System.err.println("Error code ::  " + change.getStatus().getError().getCode());
			}
		});

		replicator.addDocumentReplicationListener(new DocumentReplicationListener() {

			@Override
			public void replication(DocumentReplication documentReplication) {
				for (ReplicatedDocument rep : documentReplication.getDocuments()) {
					System.err.println("Document " + rep.getID() + " has been replicated !!");
				}
			}
		});

		// Start replication.
		replicator.start();

		// Check status of replication and wait till it is completed
		while (replicator.getStatus().getActivityLevel() != Replicator.ActivityLevel.STOPPED) {
			Thread.sleep(5000);

			int numRows = 0;
			// Create a query to fetch all documents.
			System.out.println("== Executing Query 3");
			Query queryAll = QueryBuilder.select(SelectResult.expression(Meta.id), SelectResult.property(Prop_Name),
					SelectResult.property(Prop_Price), SelectResult.property(Prop_Type),
					SelectResult.property(Prop_Channels)).from(DataSource.database(database));
			try {
				for (Result thisDoc : queryAll.execute()) {
					numRows++;
					System.out.println(String.format("%d ... Id: %s is learning: %s version: %.2f type is %s", numRows,
							thisDoc.getString(Prop_Id), thisDoc.getString(Prop_Name), thisDoc.getDouble(Prop_Price),
							thisDoc.getString(Prop_Type)));
				}
			} catch (CouchbaseLiteException e) {
				e.printStackTrace();
			}
			System.out.println(String.format("Total rows returned by query = %d", numRows));
		}

		System.out.println("Finish!");

		System.exit(0);
	}

	/**
	 * Step 1 : open authentication URL and retrieve the login form
	 * Step 2 : fill the login form with the user credentials and compute tokenID from DBUSER / DBPASS
	 * Step 3 : store the JWT token in a session on the Sync Gateway server
	 * 
	 * @param dbUser
	 * @param dbPass
	 * @return
	 */
	private static Cookie setTokenIDAuthorizationBearer(String dbUser, String dbPass) {
		// http://keycloak:8080/auth/realms/master/protocol/openid-connect/auth/?
		// response_type=id_token&client_id=SyncGateway&scope=openid+profile
		// &redirect_uri=http%3A%2F%2Flocalhost%3A4984%2Ftravel-sample%2F
		// &nonce=34fasf3ds&state=af0ifjsldkj&foo=bar/

		
		// step 1
		HttpResponse<String> response1 = Unirest
				.get("https://uat-itmconnect.mousquetaires.com/auth/realms/mousquetaires/protocol/openid-connect/auth/")
				.header("accept", "application/json")
				.queryString("response_type", "id_token")
				.queryString("client_id", "mobilys-plateforme")
				.queryString("client_secret", "1ad074b7-41ee-4c48-87d3-f05bddf24f30")
				.queryString("scope", "id_token")
				.queryString("redirect_uri", "http://52.174.108.107:4984/stime/")
				.queryString("nonce", "34fasf3ds")
				.queryString("state", "af0ifjsldk")
				.asString();

		System.out.println(response1.getBody());

		// get POST method
		String bodyResponse1 = response1.getBody();
		int index1 = bodyResponse1.indexOf("action=\"");

		if (index1 == -1) {
			throw new IllegalArgumentException("Form with POST url is missing in the returned page");
		}

		bodyResponse1 = bodyResponse1.substring(index1 + 8);
		int index2 = bodyResponse1.indexOf("\"");

		bodyResponse1 = bodyResponse1.substring(0, index2);

		System.out.println(bodyResponse1);

		// <form id="kc-form-login" onsubmit="login.disabled = true; return true;"
		// action="http://keycloak:8080/auth/realms/master/login-actions/authenticate?session_code=FlKWqRz58B_2YBXQRRtYbjokPFfKu5BaoUWUzaDlZw8&amp;execution=afca2cf6-c09f-4c7b-91f5-3cd7d3d69410&amp;client_id=SyncGateway&amp;

		// tab_id=-85fFZhlrcU" method="post">

		int index3 = bodyResponse1.indexOf("?");
		String postURL = bodyResponse1.substring(0, index3);

		System.out.println(postURL);

		String delim = ",";

		String queryString = bodyResponse1.substring(index3 + 1);
		queryString = queryString.replaceAll("&amp;", delim);

		StringTokenizer tokenizer = new StringTokenizer(queryString, delim);

		Map<String, Object> mapQueryString = new HashMap<String, Object>();
		while (tokenizer.hasMoreElements()) {
			String kv = (String) tokenizer.nextElement();
			System.out.println(kv);
			StringTokenizer tokenizer2 = new StringTokenizer(kv, "=");

			mapQueryString.put(tokenizer2.nextToken(), tokenizer2.nextToken());
		}

		// step 2
		HttpResponse<String> response2 = Unirest.post(postURL)
				.header("accept", "application/json")
				.queryString(mapQueryString)
				.field("username", dbUser)
				.field("password", dbPass)
				.asString();

		System.out.println("\n\n AAAAAAAAAAAAAAAAAA");
		System.out.println(response2.getBody());

		for (Header header : response2.getHeaders().all()) {
			System.out.println(header.getName() + " : " + header.getValue());
		}
		
		List<String> locationHeaderList = response2.getHeaders().get("Location");
		if (locationHeaderList == null) {
			throw new IllegalArgumentException("locationHeaderList is null");
		}

		String locationHeader = locationHeaderList.get(0);
		
		if (locationHeader == null) {
			throw new IllegalArgumentException("locationHeader is null");
		}
		
		int index4 = locationHeader.indexOf("id_token=");
		if (index4 == -1) {
			throw new IllegalArgumentException("id_token not found inside locationHeader");
		}
		
		int index5 = locationHeader.indexOf("&not-before-policy=");
		if (index5 == -1) {
			throw new IllegalArgumentException("&not-before-policy= not found inside locationHeader");
		}
		
		String idTokenValue = locationHeader.substring(index4 + 9, index5);
		
		// step 3 (1 / 2)
		HttpResponse<String> response3 = Unirest.post("http://52.174.108.107:4984/stime/_session")
				.header("Authorization", "Bearer " + idTokenValue)
				.asString();
		
		System.out.println(" >>>> " + response3.getBody());
		
		System.out.println("List of Cookies");
		Iterator<Cookie> it = response3.getCookies().iterator();
		while(it.hasNext()){
			Cookie cookie = it.next();
			System.out.println("COOKIE_Name :" + cookie.getName() 
				+ " \t Path : " + cookie.getPath() 
				+ " \t Domain : " + cookie.getDomain() 
				+ " \t Value : " + cookie.getValue());
			
			return cookie;
		}
		
		return null;
	}

}